<!DOCTYPE html>
<html>
<head>
    <title>ailtire</title>
    <!-- Viewport mobile tag for sensible mobile support -->
    <link rel="stylesheet" type="text/css"
          href="/styles/w2ui.css"/>
    <!--STYLES END-->
    <script src="/js/less.js" type="text/javascript"></script>
    <script src="/js/socket.io.js"></script>
    <script src="/js/jquery.js"></script>
    <script src="/js/w2ui.js"></script>
    <style>
        .Running {
            color: white;
            background: lightgreen;
        }

        .Ready {
            color: black;
            background: lightgreen;
        }

        .Shutdown {
            color: black;
            background: palegoldenrod;
        }

        .Rejected {
            color: black;
            background: pink;
        }

        .Failed {
            color: white;
            background: pink;
        }

        .Starting {
            color: white;
            background: lightblue;
        }

        .Preparing {
            color: black;
            background: lightblue;
        }

        .Error {
            color: white;
            background: red;
        }

        .Warning {
            color: black;
            background: lightyellow;
        }
    </style>
</head>
<body>
<header>Ailtire Stack Admin Console</header>

<div id="main" style="width: 100%; height: 1000px;"></div>

<script type="text/javascript">
let nodes = {};

    const status = {
        Running: {
            color: 'black',
            background: 'lightgreen',
        },
        Ready: {
            color: 'black',
            background: 'lightgreen',
        },
        Shutdown: {
            color: 'black',
            background: 'palegoldenrod',
        },
        Rejected: {
            color: 'black',
            background: 'pink',
        },
        Failed: {
            color: 'black',
            background: 'pink',
        },
        Starting: {
            color: 'black',
            background: 'lightblue',
        },
        Preparing: {
            color: 'black',
            background: 'lightblue',
        },
        Error: {
            color: 'white',
            background: 'red',
        },
        Warning: {
            color: 'black',
            background: 'lightyellow',
        }
    };
    // widget configuration
    const config = {
        layout: {
            name: 'layout',
            padding: 0,
            panels: [
                {type: 'left', size: 300, resizable: true, minSize: 120},
                {
                    type: 'top',
                    size: 30,
                    resizable: false,
                    overflow: 'hidden',
                    style: 'border: 1px solid #0088ff; background-color:#ccccff; color:black;',
                    items: [
                        {
                            type: 'html',
                            html: '<h3 style="color:white;">Ailtire</h3>'
                        },
                    ],
                },
                {
                    type: 'main',
                    size: 200,
                    overflow: 'hidden',
                    content: 'Details',
                    resizable: true
                },
                {
                    type: 'preview',
                    size: "80%",
                    overflow: 'hidden',
                    content: 'Logs',
                    tabs: {
                        active: 'stdout',
                        tabs: [
                            {id: 'stdout', text: 'stdout'},
                            {id: 'stderr', text: 'stderr'},
                        ],
                        onClick: function (event) {
                            if (event.target === 'stdout') {
                                w2ui['layout'].html('preview', w2ui.logGrid);
                            } else if (event.target === 'stderr') {
                                // this.owner.html('preview', w2ui.logGridError);
                                w2ui['layout'].html('preview', w2ui.logGridError);
                            }
                        }
                    }
                }
            ]
        },
        sidebar: {
            name: 'sidebar',
            nodes: [
                {id: 'interfaces', text: 'Interface'},
                {id: 'services', text: 'Services'},
                {id: 'nodes', text: 'Nodes'},
            ],
            onClick: function (event) {
                w2ui['detailGrid'].clear();
                if(event.node.type == 'Service') {
                    let detailItems = [];
                    for (let i in event.node.data) {
                        detailItems.push({
                            recid: i,
                            name: i,
                            value: event.node.data[i]
                        });
                    }
                    detailItems.push({ recid: "Iface", name: "Interfaces", value: event.node.interfaces });
                    w2ui['detailGrid'].add(detailItems);
                    w2ui['logGrid'].clear();
                    w2ui['logGrid'].add({
                        recid: 0,
                        text: `Snatching the Log for ${event.target} ...`
                    });
                    $.ajax({
                        url: `/_admin/log?name=${event.target}`,
                        success: function (results) {
                            w2ui['logGrid'].clear();
                            let logItems = [];
                            for (let i in results.stdout) {
                                logItems.push({recid: i, text: results.stdout[i]});
                            }
                            w2ui['logGrid'].add(logItems);
                            w2ui['logGridError'].clear();
                            logItems = [];
                            for (let i in results.stderr) {
                                logItems.push({recid: i, text: results.stderr[i]});
                            }
                            w2ui['logGridError'].add(logItems);
                        }
                    });
                } else if(event.node.type == 'Node') {
                   let detailItems = [];
                   for (let i in event.node.services) {
                       let statum = {background: 'white', color: 'black'};
                       if (status.hasOwnProperty(event.node.services[i].status)) {
                           statum = status[event.node.services[i].status];
                       }
                       detailItems.push({
                           recid: i,
                           name: event.node.services[i].name,
                           value: event.node.services[i].status,
                           style: `background-color:${statum.background}; color=${statum.color}`,
                       });
                   }
                   w2ui['detailGrid'].add(detailItems);
                   w2ui['logGrid'].clear();
               } else if(event.node.type == 'Interface') {
                    let detailItems = [];
                    let i=0;
                    for(let j in event.node.route) {
                        let route = event.node.route[j];
                        let pathRewrite = Object.keys(route.pathRewrite).map((key) => {
                            return `${key}=>${route.pathRewrite[key]}`;
                        });
                        detailItems.push({recid: i++, name: 'Interface', value: event.node.id});
                        detailItems.push({recid: i++, name: 'Target', value: route.target});
                        detailItems.push({recid: i++, name: 'Service', value: route.service});
                        if(event.node.serviceInstance) {
                            detailItems.push({
                                recid: i++,
                                name: 'ServiceInstance',
                                value: event.node.serviceInstance.name,
                            });
                        }
                        detailItems.push({recid: i++, name: 'Path Rewrite', value: pathRewrite.join(',')});
                    }
                    w2ui['detailGrid'].add(detailItems);
                    w2ui['logGrid'].clear();
                }
            },
        },
        logGrid: {
            name: 'logGrid',
            columns: [
                {field: 'text', caption: 'stdout', size: '100%'},
            ],
            records: []
        },
        logGridError: {
            name: 'logGridError',
            columns: [
                {field: 'text', caption: 'stderr', size: '100%'},
            ],
            records: []
        },
        detailGrid: {
            name: 'detailGrid',
            columns: [
                {field: 'name', caption: '', size: '30%'},
                {field: 'value', caption: '', size: '70%'},
            ],
            records: []
        },
    };

    $(function () {
            // initialization
            console.log("Init Stuff");
            $('#main').w2layout(config.layout);
            w2ui.layout.html('left', $().w2sidebar(config.sidebar));
            w2ui.layout.html('main', $().w2grid(config.detailGrid));
            $().w2grid(config.logGrid);
            $().w2grid(config.logGridError);
            $.ajax({
                url: '/_admin/status',
                success: function (results) {
                    loadInterfaces('interfaces', results.interfaces, results.services);
                    loadServices('services', results.services, 'interfaces', results.interfaces);
                    nodes = {};
                    loadNodes('nodes', results.services);

                    w2ui['sidebar'].refresh();
                },
                failed: function (err) {
                    console.log("Error on Init Load:", err);
                }
            });
            let socket = io(window.location.origin,
                {path:  '/socket.io'}
            );
            socket.on('status', (results) => {
                loadInterfaces('interfaces', results.interfaces, results.services);
                loadServices('services', results.services, 'interfaces', results.interfaces);
                loadNodes('nodes', results.services);
                w2ui['sidebar'].refresh();
            });
        }
    );

    function loadServices(parent, results, iparent, interfaces) {
        for (let i in results) {
            let result = results[i];
            let statum = {background: 'white', color: 'black'};
            if (status.hasOwnProperty(result.status)) {
                statum = status[result.status];
            }
            let ifaces = getInterfaces(result.shortName, interfaces);
            let ifaceNames = ifaces.map((iface) => { return iface.name}).join(',');
            let sitem = {
                id: i,
                type: 'Service',
                text: result.name,
                status: result.status,
                data: result,
                interfaces: ifaceNames,
                class: result.status,
                style: `background-color:${statum.background}; color=${statum.color}`,
                nodes: []
            };
            if (!w2ui['sidebar'].set(parent, i, sitem)) {
                w2ui['sidebar'].add(parent, [sitem]);
            }
            if(result.services && result.services.services) {
                for(let iface in ifaces) {
                    let nodename = iparent + '--' + ifaces[iface].name.replace(/\//g, '-');
                    loadServices(i, result.services.services, nodename, result.services.interfaces);
                    loadInterfaces(nodename, result.services.interfaces, result.services.services);
                }
            }
        }
    }
    function loadNodes(parent, results) {
        for (let i in results) {
            let result = results[i];
            let statum = {background: 'white', color: 'black'};
            if (status.hasOwnProperty(result.status)) {
                statum = status[result.status];
            }
            if(!nodes.hasOwnProperty(result.node)) {
                let sitem = {
                    id: result.node,
                    type: 'Node',
                    text: result.node,
                    services: [result],
                    nodes: []
                };
                nodes[result.node] = sitem;
                if (!w2ui['sidebar'].set(parent, i, sitem)) {
                    w2ui['sidebar'].add(parent, [sitem]);
                }
            } else {
                nodes[result.node].services.push(result);
            }
            if(result.services && result.services.services) {
                loadNodes(parent, result.services.services);
            }
        }
    }
    function loadInterfaces(parent, results, services) {
        for (let i in results) {
            let result = results[i];
            // Find the status of the cooresponding service.
            let [statum, serviceInstance] = getServiceStatus(result.service, services);
            let id = parent + '--' + i.replace(/\//g,'-');
            let sitem = {
                id: id,
                type: 'Interface',
                text: i,
                route: [result],
                service: result.service,
                serviceInstance: serviceInstance,
                style: `background-color:${statum.background}; color=${statum.color}`,
                nodes: [],
            };
            if (!w2ui['sidebar'].set(parent, i, sitem)) {
                w2ui['sidebar'].add(parent, [sitem]);
            }
        }
    }
    function getServiceStatus(sname, services) {
        let statum = {background: 'white', color: 'black'};
        for(let i in services) {
            let service = services[i];
            if(service.shortName === sname) {
                if (status.hasOwnProperty(service.status)) {
                    statum = status[service.status];
                }
                return [statum, service];
            }
        }
        return [statum, undefined];
    }
    function getInterfaces(sname, interfaces) {
        let retval = [];
        for(let i in interfaces) {
            let iface = interfaces[i];
            iface.name = i;
            if(iface.service === sname) {
                retval.push(iface);
            }
        }
        return retval;
    }
</script>
</body>
<footer>Darren Pulsipher</footer>
</html>
