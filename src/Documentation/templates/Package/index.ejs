<head>
    <link rel="stylesheet/less" type="text/css" href="/styles/importer.less" />
    <script src="/js/less.js" type="text/javascript"></script>
</head>
<% let packageNoSpaces = package.name.replace(/ /g, ''); %>
<h1><%= package.name %></h1>
<%= package.description %>

<%- partial(basedir + '/details.ejs', {obj:package}) %>

<h2>Use Cases</h2>
<ul>
<% for(let uname in package.usecases) {
let uc = package.usecases[uname];
let ucName = uc.name;
let prefix = uc.prefix;
-%>
    <li> <a href='/doc/usecase<%= prefix %>/<%= uname %>'><%= ucName %></a></li>
<% } %>
</ul>

<img src='./UseCases.puml'></img>
<h2>Users</h2>
<ul>
<% for(let aname in actors) {
-%>
    <li><a href='/doc/actor/<%= actors[aname].shortname %>'><%= actors[aname].name %></a></li>
<% } %>
</ul>

<img src='./UserInteraction.puml'></img>

<h2>Interface</h2>
<ul>
<% for(let mname in package.interface) {
let method = package.interface[mname]
-%>
<li><a href='#Action-<%= mname.replace(/\//g, '-') %>'><%= mname %>(...)</a></li>
<% } %>
</ul>

<h2>Logical Artifacts</h2>
The Data Model for the  <%- package.name %> shows how the different objects and classes of object interact
and their structure.

<img src='./Logical.puml'>

<h3>Sub Packages</h3>
<ul>
<% for(let sname in package.subpackages) {
    let spkg = package.subpackages[sname];
    let spkgNoSpace = spkg.name.replace(/ /g, '');
-%>
<li><a href='./<%= sname %>/index.html'><%= spkg.name %></a>
    <% } %>
</ul>

<h3>Classes</h3>
<ul>
<% for(let cname in package.classes) {
    let cls = package.classes[cname].definition;
    let clsNoSpace = package.prefix + '/' + cls.name.replace(/ /g, '');
-%>
<li><a href='/doc/model<%= clsNoSpace %>'><%= cls.name %></a>
<% } %>
</ul>



<h2>Activities and Flows</h2>
The <%= package.name %> subsystem provides the following activities and flows.

<img src='./Process.puml'></img>

<h2>Deployment Architecture</h2>
This subsystem is deployed using micro-services as shown in the diagram below. The 'micro' module is
used to implement the micro-services in the system.
The subsystem also has an CLI, REST and Web Interface exposed through a sailajs application. The sailsjs
application will interface with the micro-services and can monitor and drive work-flows through the mesh of
micro-services.

<img src='./Deployment.puml'> </img>

<h2>Physical Architecture</h2>
The <%= package.name %> subsystem is is physically laid out on a hybrid cloud infrastructure. Each microservice is shown
how they connect to each other. All of the micro-services communicate to each other and the main app through a
REST interface. A CLI, REST or Web interface for the app is how other subsystems or actors interact. Requests are
forwarded to micro-services through the REST interface of each micro-service.

<img src='./Physical.puml'> </img>

<h2>Micro-Services</h2>
These are the micro-services for the subsystem. The combination of the micro-services help implement
the subsystem's logic.
<% for(let ename in package.deploy.envs) {
    let env = package.deploy.envs[ename];
%>
<h3><%= ename %></h3>
<ul>
    <% for(let sname in env.definition.services) {
        let service = env.definition.services[sname];
    %>
        <li><%= sname %> : <%= service.image %></li>
    <% } %>
</ul>
<% } %>

<h2>Interface Details</h2>
<% for(let mname in package.interface) {
    let method = package.interface[mname]
    method.name = mname;
-%>
<div id="Action-<%= mname.replace(/\//g, '-') %>">
<%- partial("./templates/Action/_index.ejs", {action: method}) %>
</div>
<% } %>
