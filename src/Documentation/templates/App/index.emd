---
layout: default
title: <%= topPackage.name %> Overview
---

{# topPackage.name.toLowerCase()-project}

# <%= topPackage.name %>

<%- partial(basedir + '/doc.emd', {obj:topPackage}) %>

# Actors

There are several users of the system. We first took a use case analysis approach to the architecture. First,
identifying the actors/users of the system and building out how the actor uses the system? What their key objectives and
goals are? and How they use the system? This list is not an exhaustive list of all actors of the system but are the
primary actors.

<% for(let name in actors) { -%>

* [<%= name %>](actor-<%= actors[name].shortname %>)
  <% } %>

These actors are found in most organizations and there are several different organizational structures that can be
employed. The key is to identify the people or organization that fits the different actors in the systems. The following
is an example of a centralized organizational structure of the actors of the system.

# UseCases

<% for(let name in global.usecases) { let usecase = global.usecases[name]; -%>

* [<%= usecase.name %>](usecase-<%= name %>)
  <% } %>

![UseCase](./usecases.png)

# Solution Architecture

The Data Model for the  <%- topPackage.name %> shows how the different objects and classes of object interact and their
structure.
<% for(let name in topPackage.subpackages) { -%>

* [<%= topPackage.subpackages[name].name %>](package-<%= topPackage.subpackages[name].prefix.replace(/\//g, '-') %>)
  <% } %>

![Logical Diagram](./subpackage.png)

## Deployment Architecture

This subsystem is deployed using micro-services as shown in the diagram below. A nodejs app is used to implement the
micro-services in the system. Each subsystem also has an CLI, REST and Web Interface exposed through a nodejs
application. The nodejs application will interface with the micro-services and can monitor and drive work-flows through
the mesh of micro-services.

The solution can be deployed on different environments. The standard environments in the architecture are local, dev,
test, and prod. These environments fit into the typical devops pipelines that exist in the industry. Additional
deployment environments can be added to fit the needs of the user.

## Physical Architecture

The <%= topPackage.name %> architecture is physically laid out on a hybrid cloud infrastructure using a microservice
architecture. All of the micro-services communicate to each other and the main app through a REST interface. A CLI, REST
or Web interface is available for external systems or users to interact with the system. Each subsystem in the
architecture uses an aggregated service/stack pattern that allows for the elasticity of services based on the workloads,
capacity and business rules established for the solution. See each subsytem for more information on the individual
stacks and their services.

## Deployment Architecture

This subsystem is deployed using micro-services as shown in the diagram below. The 'micro' module is used to implement
the micro-services in the system. The subsystem also has an CLI, REST and Web Interface exposed through a nodejs
application. The nodejs application will interface with the micro-services and can monitor and drive work-flows through
the mesh of micro-services.

