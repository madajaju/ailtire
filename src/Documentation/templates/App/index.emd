---
layout: default
title: Overview
nav_order: 1
---
# <%= topPackage.name %>

<%- partial(basedir + '/doc.emd', {obj:topPackage}) %>

# <%= topPackage.name %> Details

The following section contains details of the high level architecture of the <%- topPackage.name %> system. It is broken
into the actors of the system, the use cases of the system, and a high level architecture of the system including
physical and deployment strategies. Details of these elements can be found by following the links to the complete
architecture.

## Actors

There are several users of the system. We first took a use case analysis approach to the architecture. First,
identifying the actors/users of the system and building out how the actor uses the system? What their key objectives and
goals are? and How they use the system? This list is not an exhaustive list of all actors of the system but are the
primary actors.

<% for(let name in actors) { -%>
* [<%= name %>](actor-<%= actors[name].shortname %>) - <%- actors[name].description %>
<% } %>

These actors are found in most organizations and there are several organizational structures that can be employed. The
key is to identify the people or organization that fits the different actors in the systems. The following is an example
of a centralized organizational structure of the actors of the system.

## UseCases

<% for(let name in topPackage.usecases) { let usecase = topPackage.usecases[name]; -%>
* [<%= usecase.name %>](usecase-<%= name %>) - <%- usecase.description %>
<% } -%>

![UseCase](./usecases.png)

## Solution Architecture

The Data Model for the  <%- topPackage.name %> shows how the different objects and classes of object interact and their
structure.
<% for(let name in topPackage.subpackages) { -%>
* [<%= topPackage.subpackages[name].name %>](package-<%= topPackage.subpackages[name].prefix.replace(/\//g, '-') %>) -
<%- topPackage.subpackages[name].description %>
<% } -%>

![Logical Diagram](./subpackage.png)

### Deployment Architecture

This subsystem is deployed using microservices as shown in the diagram below. A nodejs app is used to implement the
microservices in the system. Each subsystem also has an CLI, REST and Web Interface exposed through a nodejs
application. Additionally, the subsystems handle events through a WebSocket interface. The nodejs application will
interface with the microservices and can monitor and drive work-flows through the mesh of microservices.

The solution can be deployed on different environments. The standard environments in the architecture are local, dev,
test, and prod. These environments fit into the typical devops pipelines that exist in the industry. Additional
deployment environments can be added to fit the needs of the user.

<% for(let ename in package.deploy.envs) { let env = package.deploy.envs[ename]; -%>
* [<%= ename %>](environment-<%= package.prefix.replace(/\//g, '-')%>-<%= ename %>)
<% } -%>

### Physical Architecture

The <%= topPackage.name %> architecture is physically laid out on a hybrid cloud infrastructure using a microservice
architecture. All the microservices communicate to each other and the administrative app through a REST and Websocket
interface. A CLI, REST, Websocket and Web interface is available for external systems or users to interact with the
system. Each subsystem in the architecture uses an aggregated service/stack pattern that allows for the elasticity of
services based on the workloads, capacity and business rules established for the solution. See each subsystem for more
information on the individual stacks and their services.

<% for(let ename in package.deploy.envs) { let env = package.deploy.envs[ename]; -%>
* [<%= ename %>](environment-<%= package.prefix.replace(/\//g, '-')%>-<%= ename %>)
<% } -%>