@startuml

left to right direction

<%
if(Object.keys(deploy.ports).length > 0) {
%>
hexagon external #black [
    <b><color:white>external</color></b>
]
    <% for(let port in deploy.ports) { %>
interface <%= port %>
<%= port %> -- external
    <% }
}
%>
<%
/////
// Boundary for all of the ingress networks.
let ingressColor = "#black";
for(let nname in deploy.ingress) {
    let ncolor = deploy.ingress[nname].color;
    ingressColor = ncolor;
}
-%>
<%
/////
// Boundary for all of the egress networks
let egressColor = "#blue";
for(let nname in deploy.egress) {
    let ncolor = deploy.egress[nname].color;
    egressColor = ncolor;
%>
<% }
%>
<%
//////
// Now put all of the substacks here.
for(let sname in deploy.stacks) {
    let stack = deploy.stacks[sname];
-%>
node "<%= stack.name %>" as <%= stack.id %> #<%= stack.color.replace(/\#/, '')  %> {
    portin "parent" as <%= stack.id %>PortIn <%= egressColor %>
}
<% }
%>
<%
/////
// Main Stack for the diagram
%>

node "<%= pkg.deploy.name %>" #<%= pkg.color.replace(/\#/,''); %> {
<%
// Handle the deploy ports
if(Object.keys(deploy.ports).length > 0) {
    for(let port in deploy.ports) { %>
    portin "<%= port %>" as <%= pkg.deploy.name %>Port<%= port %> <%= egressColor %>
    <%= pkg.deploy.name %>Port<%= port %> -- external
<% }
}
%>

<%
/////
// Networks Ingress (external), Egress (attachable), other networks
for(let nname in deploy.networks) {
    let network = deploy.networks[nname];
-%>
    hexagon <%= network.id %> <%= network.color %> [
            <b><color:white><%= nname %></color></b>
    ]
    <% if(network.externalName) {
        if(network.type === 'egress') {
    %>
    portout " " as <%= network.id %>PortOut <%= network.color %>
    <%= network.id %> -[<%= network.color %>]- <%= network.id %>PortOut
    <%
        } else {
    %>
    portin " " as <%= network.id %>PortIn <%= network.color %>
    <%= network.id %>PortIn -[<%= network.color %>]- <%= network.id %>
    <% }
    } %>
<% } %>
<%
//////
// frontend service if is exists
// if it does then grab all of the mappings
if(deploy.frontend.service) {
    let fserve = deploy.frontend.service;
%>
node "<%= fserve.name %>" as <%= fserve.id %> {
    <%  for(let mname in deploy.frontend.maps) {
        let item = deploy.frontend.maps[mname];
-%>
card "<%= item.path %>" as <%= item.id %>
    <% } %>
}
<% }
/////
// Put the services in the stack
for(let sname in deploy.services) {
    let service = deploy.services[sname];
-%>
node "<%= sname %>" as <%= service.id %> #white {
<%
for(let nname in service.networks) {
    let network = service.networks[nname];
    if(network.type === 'ingress') {
%>
    portIn " " as <%= service.id %><%= network.id %> <%= network.color %>
    <%= network.id %> -[<%= network.color %>]- <%= service.id %><%= network.id %>
    <% } else { -%>
    portOut " " as <%= service.id %><%= network.id %> <%= network.color %>
   <%= service.id %><%= network.id %> -[<%= network.color %>]- <%= network.id %>
   <% } -%>
<% } %>
<%
    /////
    // Now put the images for the services in the top stack

    let image = deploy.images[service.image];
    let imagename = image.id.replace(/[:\\\/\-]/g, '_');
    if(image.stack) {
    -%>
    collections "<%= image.name %>" as <%= imagename %>
    <% } else { %>
    artifact "<%= image.name %>" as <%= imagename %>
    <% }
%>
}
<%
}
%>
}
<%
//////
// Line from External to Frontend
if(deploy.frontend.id) {
%>
external -[#black]- <%- deploy.frontend.id %>
<%
}
//////
// Routes from maps to services in frontend
if(deploy.frontend.id) {
    for(let i in deploy.frontend.maps) {
        let map = deploy.frontend.maps[i];
%>
<%= map.id %> -[<%= map.network.color %>]-> <%= map.service.id %>
<%  }
}

////
// Connect Frontend to it's image
if(deploy.frontend.id) {
    let serviceid = deploy.frontend.id;
    let image = deploy.images[deploy.frontend.image];
    let imagename = image.id.replace(/[:\\\/\-]/g, '_');
%>
<%= serviceid %> .... <%= imagename %>
<%
}
/////
// Connect Stack to its image.
for(let sname in deploy.stacks) {
    let stack = deploy.stacks[sname];
    let image = deploy.images[stack.image]
    let imagename = image.id.replace(/[:\\\/\-]/g, '_');
%>
<%= imagename %> --> <%= stack.id %>
    <% if(stack.deploy.externalNetwork) { %>
        <%= stack.id %>snet --[<%= stack.deploy.externalNetwork.color %>]-- <%= stack.deploy.externalNetwork.externalName %>
    <% } %>
    childrennetPortOut -[<%= egressColor %>]- <%= stack.id %>PortIn
    <%
} %>

@enduml
