<head>
    <script src="js/three.js"></script>
    <script src="js/3d-force-graph.js"></script>
    <script src="js/d3-force-3d.js"></script>
    <script src="js/d3-octree.js"></script>
    <script src="js/Graph3D.js"></script>
</head>
<div style="display:none;">
<div id="scratchspace" style="display:none;">
    <a-scene embedded height="0px" width="0px">
        <a-entity position="-10 20 -100">
            <a-sphere id="default3D" position="0 0 0" radius="10" color="#cccccc"></a-sphere>
            <a-sphere id="default3DSelected" position="0 0 0" radius="10" color="#ffff00"></a-sphere>
            <a-sphere id="default3DTargeted" position="0 0 0" radius="10" color="#ff0000"></a-sphere>
            <a-sphere id="default3DSourced" position="0 0 0" radius="10" color="#00ff00"></a-sphere>
    <% if(model.hasOwnProperty('view')) { %>
        <%- model.view.object3d() %>
    <% }
    for(let aname in model.associations) {
        let assoc = model.associations[aname];
        let acls = global.classes[assoc.type.replace(/\s/g,'')];
        if(acls)  {
            if(acls.definition.view) {
            try {
    %>
            <%- acls.definition.view.object3d() %>
        <% } catch(e) { console.error("Could not find assoc:", e); }
          }
        }
    }
    for(let i in model.dependant) {
        let depend = model.dependant[i];
        if(depend.model.hasOwnProperty('view')) {
            try { %>
            <%- depend.model.view.object3d() %>
            <% } catch(e) { console.log("Could not get object3d!", e); } %>
        <% }
    }
    %>
        </a-entity>
    </a-scene>
</div>
</div>
<div class="modelGraph" id="DrawingArea3D">
    <script type="module">
        let data = {nodes:{}, links:[]};
        let mname = '<%= model.name %>';
        let pkgName = '<%= model.package.name %>';
        let view = null;
        data.nodes[mname] = {id:mname, name:mname, group: mname, level:pkgName, view:mname +'3D'};
        <% for(let aname in model.associations) {
           let assoc = model.associations[aname];
            let linkValue = 1;
            if(assoc.owner) {
                linkValue += 3;
            }
            if(assoc.composition) {
                linkValue += 5;
            }
            let acls = global.classes[assoc.type.replace(/\s/g,'')];
            let alevel = model.package;
            let aview =null;
            if(!acls) {
                console.log("Could not find:", assoc.type);
                aview ="default3D";
            } else {
                acls = acls.definition;
                alevel = acls.package;
                aview = acls.name + '3D';
            }
            %>
            data.nodes["<%= assoc.type %>"] = {id:"<%= assoc.type  %>", name:"<%= assoc.type %>", group: '<%= assoc.type %>', level: '<%= alevel.name %>', view: '<%- aview %>'};
            <%
            if(assoc.cardinality === 1) {
            %>
                data.links.push({source: mname, target:"<%= assoc.type %>", value: 20, distance:20} );
            <% } else { %>
                data.links.push({source:mname, target:"<%= assoc.type %>", value: 20, multiple:true, distance:20});
            <%}
        }
        %>
        let dname;
        let dview = null;
        let dpkg;
        <%
        for(let i in model.dependant) {
            let depend = model.dependant[i];
        %>
            dview = null;
            dname = '<%= depend.model.name %>';
            dview = '<%- depend.model.name + '3D'%>';
            dpkg = '<%- depend.model.package.name %>';
            data.nodes[dname] = {id:dname, name:dname, group:dname, level:dpkg, view:dview};
            data.links.push({source:dname, target:mname, value: 20, distance: 20} );
        <% } %>
        let graph = new Graph3D("DrawingArea3D", data, {width:1000, height:300, background:"#444488", linkColor:"#ffffff"});
    </script>
</div>
