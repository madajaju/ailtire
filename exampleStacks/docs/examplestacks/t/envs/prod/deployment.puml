@startuml

left to right direction


boundary children #black


entity parent #red

stack "t_s1" as t_s1Stack {
    queue t_s1Stack #red [
        <b><color:white>parent</color></b>
    ]
}
stack "t_s2" as t_s2Stack {
    queue t_s2Stack #red [
        <b><color:white>parent</color></b>
    ]
}
stack "t_s3" as t_s3Stack {
    queue t_s3Stack #red [
        <b><color:white>parent</color></b>
    ]
}



stack  "examplestacks_t" #lightblue {
    queue childrennet #black [
            <b><color:white>children</color></b>
    ]
    childrennet -[#black]- children
    queue siblingnet #blue [
            <b><color:white>sibling</color></b>
    ]
    siblingnet -[#blue]- sibling
    queue parentnet #red [
            <b><color:white>parent</color></b>
    ]
    parentnet -[#red]- parent

node "stack1" as stack1Service
node "stack2" as stack2Service
node "stack3" as stack3Service
node "frontend" as frontendService
node "gw" as gwService

        collections "t_s1:latest" as t_s1latestimage
            collections "t_s2:latest" as t_s2latestimage
            collections "t_s3:latest" as t_s3latestimage
    
        artifact "examplestacks_t_web" as examplestacks_t_webimage
    
        artifact "examplestacks_t_gw" as examplestacks_t_gwimage
    
}

stack1Service -[#black]- childrennet

stack1Service -[#red]- parentnet

stack2Service -[#black]- childrennet

stack2Service -[#red]- parentnet

stack3Service -[#black]- childrennet

stack3Service -[#red]- parentnet

frontendService -[#blue]- siblingnet

gwService -[#black]- childrennet

gwService -[#blue]- siblingnet
stack1Service .... t_s1latestimage
stack2Service .... t_s2latestimage
stack3Service .... t_s3latestimage
frontendService .... examplestacks_t_webimage
gwService .... examplestacks_t_gwimage

t_s1latestimage --> t_s1Stack

t_s2latestimage --> t_s2Stack

t_s3latestimage --> t_s3Stack


@enduml
